# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e94ZShC6OhJXWxRw0t5kvAUkH2kN_tR8

# Data Diri
Nama : Naufal Aditya Akbar <br />
Naufaladityaakbar@gmail.com <br />
Username : Faladitya
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
!pip install split-folders
import splitfolders as sf
import tensorflow as tf
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
import zipfile
import os
import shutil
from google.colab import files
from keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator

print(tf.__version__)

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

local_zip = '/tmp/rockpaperscissors.zip'
zip_ref   = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

base_dir         = '/tmp/rockpaperscissors/rps-cv-images'
base_dir_r       = os.path.join(base_dir, 'rock')
base_dir_p       = os.path.join(base_dir, 'paper')
base_dir_s       = os.path.join(base_dir, 'scissors')


sf.ratio(
    base_dir,
    output = os.path.join('/tmp/rockpaperscissors/image'),
    seed   = None,
    ratio  = (0.6, 0.4)
)

image_dir = '/tmp/rockpaperscissors/image'

train_dir_r      = os.path.join(image_dir, 'train/rock')
train_dir_p      = os.path.join(image_dir, 'train/paper')
train_dir_s      = os.path.join(image_dir, 'train/scissors')

validation_dir_r = os.path.join(image_dir, 'val/rock')
validation_dir_p = os.path.join(image_dir, 'val/paper')
validation_dir_s = os.path.join(image_dir, 'val/scissors')

#train dan validation
train_set = (
      len(os.listdir(train_dir_r))
    + len(os.listdir(train_dir_p))
    + len(os.listdir(train_dir_s))
)

validation_set = (
      len(os.listdir(validation_dir_r))
    + len(os.listdir(validation_dir_p))
    + len(os.listdir(validation_dir_s))
)

print(f'Train Set      : {train_set}')
print(f'Validation Set : {validation_set}')


train_dir      = os.path.join(image_dir, 'train')
validation_dir = os.path.join(image_dir, 'val')

print(os.listdir(train_dir))
print(os.listdir(validation_dir))

#Augmentasi data gambar
train_datagen = ImageDataGenerator(
    rescale          = 1./255,
    rotation_range   = 20,
    horizontal_flip  = True,
    shear_range      = 0.2,
    fill_mode        = 'nearest'
)

test_datagen = ImageDataGenerator(
    rescale          = 1./255
)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150,150),
    batch_size= 32,
    class_mode='categorical'
)

validation_generator = test_datagen.flow_from_directory(
    validation_dir,
    target_size = (150,150),
    batch_size = 32,
    class_mode = 'categorical'
)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv2D(32, (3,3), activation = 'relu', input_shape= (150,150,3)),
  tf.keras.layers.MaxPooling2D(2,2),
  tf.keras.layers.Conv2D(64,(3,3), activation= 'relu'),
  tf.keras.layers.MaxPooling2D(2,2),
  tf.keras.layers.Conv2D(128,(3,3), activation= 'relu'),
  tf.keras.layers.MaxPooling2D(2,2),
  tf.keras.layers.Flatten(),
  tf.keras.layers.Dropout(0.5),
  tf.keras.layers.Dense(512, activation= 'relu'),
  tf.keras.layers.Dense(3, activation= 'softmax')
])

model.summary()
model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

class call_back(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') > 0.95):
      print("\n Stop proses akurasi telah melebihi 95%")
      self.model.stop_training = True

callbacks = call_back()

model.compile(loss = 'categorical_crossentropy',
              optimizer= 'RMSprop',
              metrics= ['accuracy'])

_history_ = model.fit(
    train_generator,
    steps_per_epoch = 41,
    epochs = 20,
    validation_data = validation_generator,
    validation_steps = 27,
    verbose =2,
    callbacks=[callbacks]
)

acc = _history_.history['accuracy']
val_acc = _history_.history['val_accuracy']

loss = _history_.history['loss']
val_loss = _history_.history['val_loss']

plt.plot(acc, color='blue')
plt.plot(val_acc, color='green')
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

plt.plot(loss, color='blue')
plt.plot(val_loss, color='green')
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show

uploaded = files.upload()

for fn in uploaded.keys():

  path = fn
  img = image.load_img(path, target_size =(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)

  print(fn)
  if classes [0,0]!=0:
    print(f'Prediction : Paper')
  elif classes[0,1]!= 0:
    print(f'Prediction : Rock')
  else:
    print(f'Prediction : Scissors')